import nest_asyncio
import streamlit as st
import fitz
import telegram
import logging
import asyncio

from langchain_ollama import OllamaLLM, OllamaEmbeddings
from langchain_community.vectorstores import Chroma
from langchain.memory import ConversationBufferMemory
from langchain.prompts import PromptTemplate
from langchain.callbacks.base import BaseCallbackHandler

logging.basicConfig(level=logging.INFO)

# –í–≤–æ–¥ Telegram Chat ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
TELEGRAM_CHAT_ID = st.text_input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à Telegram Chat ID:", type="password")

def send_telegram_message(chat_id, message):
    try:
        bot = telegram.Bot(token="7747155220:AAGYM6f6OePOmFUrWX5u9fVvuIydY7qKB-c")
        asyncio.run(bot.send_message(chat_id=chat_id, text=message))
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")

# Callback –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram
class TelegramCallbackHandler(BaseCallbackHandler):
    async def on_llm_end(self, response, **kwargs):
        if TELEGRAM_CHAT_ID:
            message = f"üì¢ LLM –∑–∞–≤–µ—Ä—à–∏–ª –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–ø—Ä–æ—Å–∞!\n\n–û—Ç–≤–µ—Ç: {response}"
            send_telegram_message(TELEGRAM_CHAT_ID, message)

async def filter_swear_words(text):
    swear_words = ['fuck you', 'fuck','–±–ª—è–¥—å','pidoras', 'nigga', 'shit','bitch', 'idiot', 'slut','bastard', 'asshole']
    found_bad_words = [word for word in swear_words if word in text.lower()]
    if found_bad_words and TELEGRAM_CHAT_ID:
        message = f"‚ö†Ô∏è –í –∑–∞–ø—Ä–æ—Å–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω—ã–µ —Å–ª–æ–≤–∞: {', '.join(found_bad_words)}"
        send_telegram_message(TELEGRAM_CHAT_ID, message)
    return text

def extract_text_from_pdf(uploaded_file):
    try:
        uploaded_file.seek(0)
        pdf_document = fitz.open(stream=uploaded_file.read(), filetype="pdf")
        text = "\n".join([page.get_text("text") for page in pdf_document])
        return text.strip()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ PDF: {e}")
        return None

def main():
    st.title("üìÑ PDF-–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Å Llama3 –∏ Telegram Callback")
    uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ PDF-—Ñ–∞–π–ª", type=["pdf"])
    pdf_text = extract_text_from_pdf(uploaded_file) if uploaded_file else None
    user_input = st.text_input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å:")
    if st.button("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å"):
        if not user_input.strip():
            st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å.")
            return
        if not pdf_text:
            st.warning("–§–∞–π–ª –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ –Ω–µ –±—ã–ª –∑–∞–≥—Ä—É–∂–µ–Ω.")
            return
        filtered_input = asyncio.run(filter_swear_words(user_input))
        full_input = f"{pdf_text}\n\n–í–æ–ø—Ä–æ—Å: {filtered_input}"
        st.write("üì¢ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ LLM...")
        llm = OllamaLLM(model="llama3.2:latest", callbacks=[TelegramCallbackHandler()])
        prompt_template = PromptTemplate(
            input_variables=["input"],
            template="–î–∞–Ω —Ç–µ–∫—Å—Ç: {input}\n–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ç–µ–∫—Å—Ç –∏ –æ—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å."
        )
        chain = prompt_template | llm
        try:
            with st.spinner("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞..."):
                response = chain.invoke({"input": full_input})
            st.markdown("### ‚úÖ –û—Ç–≤–µ—Ç:")
            st.write(response)
            if TELEGRAM_CHAT_ID:
                send_telegram_message(TELEGRAM_CHAT_ID, f"‚úÖ –û—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –∑–∞–ø—Ä–æ—Å:\n\n{response}")
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {e}")

if name == "main":
    main()
