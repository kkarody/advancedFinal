import nest_asyncio
nest_asyncio.apply()

import streamlit as st
import fitz
import telegram
import logging
import asyncio

from langchain_ollama import OllamaLLM, OllamaEmbeddings
from langchain_chroma import Chroma
from langchain.memory import ConversationBufferMemory
from langchain.prompts import PromptTemplate
from langchain.callbacks.base import BaseCallbackHandler

logging.basicConfig(level=logging.INFO)

TELEGRAM_BOT_TOKEN = "7747155220:AAGYM6f6OePOmFUrWX5u9fVvuIydY7qKB-c"
TELEGRAM_CHAT_ID = "392539749"

# Callback –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram
class TelegramCallbackHandler(BaseCallbackHandler):
    async def on_llm_start(self, serialized, prompts, **kwargs):
        info_message = "üì¢ Telegram Callback –≤—ã–∑–≤–∞–Ω!"
        st.write(info_message)
        logging.info(info_message)
        try:
            local_bot = telegram.Bot(token=TELEGRAM_BOT_TOKEN)
            await local_bot.send_message(chat_id=TELEGRAM_CHAT_ID, text=info_message)
        except Exception as e:
            error_message = f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram: {e}"
            logging.error(error_message)
            st.error(error_message)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω—ã—Ö —Å–ª–æ–≤
async def filter_swear_words(text):
    logging.info(f"üì¢ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞: {text}")
    swear_words = ['badword1', 'badword2', 'badword3']
    found_bad_words = [word for word in swear_words if word in text.lower()]
    if found_bad_words:
        message = f"‚ö†Ô∏è –í –∑–∞–ø—Ä–æ—Å–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω—ã–µ —Å–ª–æ–≤–∞: {', '.join(found_bad_words)}"
        logging.info(f"üì¢ –û—Ç–ø—Ä–∞–≤–∫–∞ Telegram: {message}")
        try:
            local_bot = telegram.Bot(token=TELEGRAM_BOT_TOKEN)
            await local_bot.send_message(chat_id=TELEGRAM_CHAT_ID, text=message)
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram: {e}")
    return text

vector_store = Chroma(
    persist_directory="db_store",
    embedding_function=OllamaEmbeddings(model="llama3.2:latest")
)

def extract_text_from_pdf(uploaded_file):
    try:
        uploaded_file.seek(0)
        pdf_document = fitz.open(stream=uploaded_file.read(), filetype="pdf")
        text = "\n".join([page.get_text("text") for page in pdf_document])
        return text.strip()
    except Exception as e:
        error_message = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ PDF: {e}"
        st.error(error_message)
        logging.error(error_message)
        return None

def main():
    st.title("üìÑ PDF-–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Å Llama3 –∏ Telegram Callback")
    uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ PDF-—Ñ–∞–π–ª", type=["pdf"])
    pdf_text = None
    if uploaded_file:
        pdf_text = extract_text_from_pdf(uploaded_file)
        if pdf_text:
            st.text_area("üìÑ –ò–∑–≤–ª–µ—á—ë–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:", pdf_text[:2000], height=200)
    user_input = st.text_input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å:")
    if st.button("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å"):
        if not user_input.strip():
            st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å.")
            return
        if not pdf_text:
            st.warning("–§–∞–π–ª –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ –Ω–µ –±—ã–ª –∑–∞–≥—Ä—É–∂–µ–Ω.")
            return
        try:
            filtered_input = asyncio.run(filter_swear_words(user_input))
        except Exception as e:
            error_message = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞: {e}"
            st.error(error_message)
            logging.error(error_message)
            filtered_input = user_input
        full_input = (
            f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ–∫—Å—Ç –∏ –æ—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å:\n\n"
            f"{pdf_text}\n\n"
            f"–í–æ–ø—Ä–æ—Å: {filtered_input}"
        )
        st.write("üì¢ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ LLM...")
        logging.info("üì¢ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ LLM...")
        llm = OllamaLLM(
            model="llama3.2:latest",
            callbacks=[TelegramCallbackHandler()]
        )
        prompt_template = PromptTemplate(
            input_variables=["input"],
            template="–î–∞–Ω —Ç–µ–∫—Å—Ç: {input}\n–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ç–µ–∫—Å—Ç –∏ –æ—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å."
        )
        chain = prompt_template | llm
        try:
            with st.spinner("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞..."):
                response = chain.invoke({"input": full_input})
            st.markdown("### ‚úÖ –û—Ç–≤–µ—Ç:")
            st.write(response)
            logging.info(f"üì¢ –û—Ç–≤–µ—Ç LLM: {response}")
        except Exception as e:
            error_message = f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {e}"
            st.error(error_message)
            logging.error(error_message)

if __name__ == "__main__":
    main()
